Script started on Mon 20 Nov 2017 12:33:31 PM EST
kbnguy@matrix:~/oop345/w5> cd w5/usr/local/gcc/7.2.0/bin/g++ -std=c++14 w5 Notifications.h Message.h -o w5.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccd ../[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C/usr/local/gcc/7.2.0/bin/g++ -std=c++14 w5 Notifications.h Message.h -o w5.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C.cpp Notifications.h Message.h -o w5 [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C Notifications.h Message.h -o w5.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccd ../[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C/usr/local/gcc/7.2.0/bin/g++ -std=c++14 w5 Notifications.h Message.h -o w5.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Ccd w5[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kwhoami
kbnguy
kbnguy@matrix:~/oop345/w5> cat w5.cpp Noti[Kifications.* Message.*
// Workshop 5 - Containers
// w5.cpp

/********************************
NAME: Rachel Khai Binh Nguy
Date: 10/04/2017
STudent: 126463165
Week: 5
********************************/
#include <iostream>
#include <fstream>
#include "Message.h"
#include "Notifications.h"

const char REC_DELIMITER = '\n';

w5::Notifications collect(std::ifstream& in, char recDelim) {
  w5::Notifications notifications;

  do {
    w5::Message message(in, recDelim);
    if (!message.empty())
      notifications += std::move(message);
  } while (in);

  return notifications;
} 

int main(int argc, char* argv[]) {
  if (argc == 1) {
    std::cerr << argv[0] << ": missing file operand\n";
    return 1;
  }
  else if (argc != 2) {
    std::cerr << argv[0] << ": too many arguments\n";
    return 2;
  }
  std::ifstream file(argv[1]);
  if (!file) {
    std::cerr << argv[0] << "\n: Failed to open " << argv[1] << "\n";
    return 3;
  }

  std::cout << "\nNotifications\n=============\n\n";
  w5::Notifications notifications = collect(file, REC_DELIMITER);

  notifications.display(std::cout);

  std::cout << "Press any key to continue ... ";
    std::cin.get();
}#ifndef _NOTIFICATIONS_H_
#define _NOTIFICATIONS_H_

//#pragma once
// Workshop 5 - Containers
// w5.cpp

/********************************
NAME: Rachel Khai Binh Nguy
Date: 10/04/2017
STudent: 126463165
Week: 5
********************************/

#include "Message.h"

const size_t MSG_MAX = 10;
namespace w5 {
  class Notifications  {
    Message messageTable[MSG_MAX];
    size_t count = 0;
  public:
    void info(std::string label) {
      std::cout << "Notifications("<<label<<"), count = "<<count<<"\n";
    }

    Notifications() {}//- default constructor - empty
     
    Notifications(const Notifications&rhs){ //- copy constructor
           *this = rhs;
  }
  Notifications& operator=(const Notifications& rhs){ //-copy assignment operator
        if (this != &rhs) {
      //delete our brains
      for (size_t i = 0; i < count; i++)
        messageTable[i].reset();
        count = 0;
      //deep copy rhs
      count = rhs.count;
      for (size_t i = 0; i < count; i++)
        messageTable[i] = rhs.messageTable[i];
    }
    return *this;
}
        Notifications(Notifications&&rhs){// - move constructor
               *this = std::move(rhs);
  }
          Notifications&& operator=(Notifications&& rhs){// -move assignment operator
                //delete our brains
            for (size_t i = 0; i < count; i++)
              messageTable[i].reset();
            count = 0;
            //move rhs
            count = rhs.count;
            for (size_t i = 0; i < count; i++) {
              messageTable[i] = std::move(rhs.messageTable[i]);
              rhs.messageTable[i].reset();//return rhs msg into a 'zombie'
            }
            rhs.count=0;//return rhs msg count into a 'zombie'
           return std::move(*this);
  }
        ~Notifications() {}// - destructor
     
        void operator+=(const Message& msg){// - adds msg to the set
          if (count < MSG_MAX) {
            messageTable[count] = msg;
            count++;
          }
          else {
            std::cerr << __FILE__ << ":" << __LINE__ << "/n"
              << "compiled on " << __DATE__ << "at" << __TIME__ << "/n"
              << "messageTable FULL!\n"
              << "increase MESSAGE+_MAX and recompile\n";
            exit(99);
          }
  }
        void display(std::ostream& os) const {//- inserts the Message objects to the os output stream
          for (size_t i= 0; i < count; i++)
            messageTable[i].display(os);
        }
        };
}
#endif#ifndef _MESSAGE_H
#define _MESSAGE_H
//#pragma once
// Workshop 5 - Containers
// w5.cpp

/********************************
NAME: Rachel Khai Binh Nguy
Date: 10/04/2017
STudent: 126463165
Week: 5
********************************/
#include<iostream>
#include<fstream>
#include<string>

namespace w5 {
  class Message {
    std::string name, reply, tweet;
  public:
    void reset() { //default constructor
      name.clear();
      reply.clear();
      tweet.clear();
    }
    Message() { //default

    }
    Message(std::ifstream& in, char c) {//- constructor retrieves a record from the in file object, parses the record(as described above) and stores its components in the Message object.c is the character that delimits each record
      std::string line;
      getline(in, line, c);
      auto cr = line.find('\r');
      if (cr != std::string::npos)//note position not found
        line.erase(cr);
 
      size_t index = 0;
      //process name
      while (index < line.size() && line[index] != ' ') {
        name += line[index];
        index++;
      }
        //assume hit the space ''
      index++; //skip''
      //process @replay (if present)
      if (index < line.size() && line[index] == '@') {
        index++;//skip '@'
        while (index < line.size() && line[index] != ' ') {
          reply += line[index];
          index++;
        }
        index++;
        }
      //process @tweet (if present)
      while (index < line.size()) { //the end copy everything
        tweet += line[index];
        index++;
      }
     }
  bool empty() const { // - returns true if the object is in a safe empty state

    return tweet.empty();
    }
  
  void display(std::ostream& os) const { //- displays the Message objects within the container
      os << "Message\n"
        << " User  : " << name << "\n";
      if (reply != "\0") {
      os << " Reply : " << reply << "\n";
      }
      os << " Tweet : " << tweet << "\n";
      os << "\n";
    }
  };//class
}//namespace

#endifkbnguy@matrix:~/oop345/w5> cat w5.cpp Notifications.* Message.*[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cwhoami[Kcd w5[K/usr/local/gcc/7.2.0/bin/g++ -std=c++14 w5 Notifications.h Message.h -o w5.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C w5.cpp[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C w5.cpp[Kw5.cpp[K[C[C[C[C[C[C[C Notifications.h Message.h w5.cpp[K Notifications.h Message.h w5.cpp[KNotifications.h Message.h w5.cpp[K[C-std=c++14 Notifications.h Message.h w5.cppstd=c++14 Notifications.h Message.h w5.cpp[K-std=c++14 Notifications.h Message.h w5.cpp[K -std=c++14 Notifications.h Message.h w5.cpp[C-std=c++14 Notifications.h Message.h w5.cppo-std=c++14 Notifications.h Message.h w5.cpp -std=c++14 Notifications.h Message.h w5.cppw-std=c++14 Notifications.h Message.h w5.cpp5-std=c++14 Notifications.h Message.h w5.cpp -std=c++14 Notifications.h Message.h w5.cpp [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C

kbnguy@matrix:~/oop345/w5> w5 w5_test.dat

Notifications
=============

Message
 User  : jim
 Tweet : Workshop 5 is cool

Message
 User  : harry
 Reply : jim
 Tweet : working on workshop 5 now

Message
 User  : dave
 Tweet : what the ^#$%!

Message
 User  : john
 Reply : harry
 Tweet : I'm done

Press any key to continue ... 
kbnguy@matrix:~/oop345/w5> exit
exit

Script done on Mon 20 Nov 2017 12:35:26 PM EST
