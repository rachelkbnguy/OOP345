#include <iostream>
using namespace std;
const int MAX = 3;
namespace w1 {
	char * strcpy(char *DEST, const char *SRC, size_t n) {
		size_t i;
		for (i = 0; i < n && SRC[i] != '\0'; i++)
			DEST[i] = SRC[i];
		for (; i < n; i++)
			DEST[i] = '\0';
		return DEST;
	}
	class Cstring {
		char str[MAX + 1];//+1 for '/0'
	public:
		Cstring(char* s) {
			//	cout << "Cstring(" << s << ")\n";
			strncpy(str, s, MAX);
			str[MAX] = '\0';
		}

		void display(ostream& os) {
			os << str;
		}
	};//class Cstring
}//namespace w1
	ostream& operator<<(ostream& os, w1::Cstring& cs) {
		static int count = 0;
		cout << count << ": ";
		cs.display(os);
		count++;
		return os;
	}
	void process(char* s) {
		//	cout << "processs: " << s << endl;
		w1::Cstring cs(s);
		cout << cs << "\n";
	}


int main(int argc, char* argv[]) {
	//argv = ['sads',"dfgf", "gf   ", "f", "g", "  fg", "f g"];
	/*cout << argc << endl;
	cout << argv[0] << endl;

	for (int i = 0; i < argc; i++)
		cout << argv[i] << endl; */
	cout << "commandline:";
	for (int i = 0; i < argc; i++)
		cout << argv[i] ;
	cout << endl;
	cout << "Maximum number of characters stored :" << argc;
	cout << "Process";
	for (int i = 0; i < argc; i++)
		process( argv[i]);
	cout << endl;

	if(argc==1)
		cout << "commandline:";
	cout << "Insufficient number of arguments(min 1)";
	cout << endl;
	return 1;

	return 0;
}